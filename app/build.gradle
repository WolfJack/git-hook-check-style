apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.yyk.githook.githook.checkstyle"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}


/**
 * 将脚本复制到本地仓库.git下
 */
task copyGithookScriptToLocalDir(type: Copy) {
    if ((new File('../.git/hooks/commit-msg').exists()) && (new File('../.git/hooks/pre-commit').exists())) {
        return
    }

//    def isMacOrLinux = org.gradle.internal.os.OperatingSystem.current().isMacOsX() || org.gradle.internal.os.OperatingSystem.current().isLinux()
//    if (isMacOrLinux) {
//        "chmod +x " + new File('../gitHooks/localScript/commit-msg').name.execute()
//        "chmod +x " + new File('../gitHooks/localScript/commit-msg').name.execute()
//    }

    from '../gitHooks/localScript'
    into '../.git/hooks'
}

afterEvaluate {
    tasks.matching {
        it.name.startsWith('process') && (it.name.endsWith('ReleaseJavaRes') || it.name.endsWith('DebugJavaRes'))
    }.each { task ->
        task.dependsOn(copyGithookScriptToLocalDir)  // 任务依赖：执行task之前需要执行dependsOn指定的任务
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
